{"version":3,"sources":["api/api.js","components/CountrySelect/CountrySelect.js","components/PaymentMethod/PaymentMethod.js","validation.js","components/CardForm/CardForm.js","components/Notification/Notification.js","App.jsx","index.js"],"names":["BASE_URL","request","url","options","a","fetch","response","ok","Error","status","statusText","json","result","getPaymentMethods","countryCode","getCountry","res","country_code","countriesKeys","Object","keys","countries","CountrySelect","setSelectedCountry","selectedCountry","useEffect","findUserCountry","userCountry","className","onChange","event","target","value","disabled","map","PaymentMethod","setPaymentMethods","paymentMethods","values","setValues","findPaymentMethods","console","log","length","method","type","name","ps_type_id","src","img_url","alt","onlyNumbers","str","replace","validateExpDate","checkDate","currentYear","Date","getFullYear","currentMonth","getMonth","split","num","checkYear","checkMonth","initialValues","card","expDate","cvv","initialErrors","CardForm","amount","currency","doPayment","useState","errors","setErrors","isNotFilled","every","isError","some","error","onSubmit","preventDefault","id","onBlur","match","cardNumber","Luhn","isValid","title","classNames","button","Notification","notification","App","setIsError","isFilled","setIsFilled","Boolean","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.643887d6.chunk.js","sourcesContent":["/* eslint-disable max-len */\nconst BASE_URL = 'https://api.paymentwall.com/api/payment-systems/?key=02d212179155a9534354f69a0714a578&country_code=';\nconst COUNTRY_URL = 'https://api.ipdata.co?api-key=0228e97f62294e53d9396a985932a63955f9b01a62b1146963fc1d09';\n\nasync function request(url, options) {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const result = await response.json();\n\n  return result;\n}\n\nexport const getPaymentMethods = async(countryCode) => {\n  const result = await request(countryCode);\n\n  return result;\n};\n\nexport const getCountry = async() => {\n  const response = await fetch(COUNTRY_URL);\n\n  const res = await response.json();\n\n  return res.country_code;\n};\n","import React, { useEffect } from 'react';\nimport './CountrySelect.scss';\nimport countries from '../../api/countries.json';\nimport { getCountry } from '../../api/api';\n\nconst countriesKeys = Object.keys(countries);\n\n// eslint-disable-next-line react/prop-types\nexport const CountrySelect = ({ setSelectedCountry, selectedCountry }) => {\n  useEffect(() => {\n    findUserCountry();\n  }, []);\n\n  const findUserCountry = async() => {\n    const userCountry = await getCountry();\n\n    setSelectedCountry(userCountry);\n  };\n\n  const handleCountrySelect = (event) => {\n    setSelectedCountry(event.target.value);\n  };\n\n  return (\n    <>\n      <span>Select your country: </span>\n      <div className=\"control has-icons-left\">\n        <div className=\"select is-primary is-rounded\">\n          <select\n            onChange={handleCountrySelect}\n            value={selectedCountry}\n          >\n            <option value=\"\" disabled>\n              Select your country\n            </option>\n            {countriesKeys.map(countryCode => (\n              <option\n                value={countryCode}\n                key={countryCode}\n              >\n                {countries[countryCode]}\n              </option>\n            ))}\n          </select>\n        </div>\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-globe\" />\n        </span>\n      </div>\n    </>\n  );\n};\n","/* eslint-disable react/prop-types */\nimport React, { useEffect } from 'react';\nimport { getPaymentMethods } from '../../api/api';\nimport './PaymentMethod.scss';\n\nexport const PaymentMethod = ({\n  selectedCountry,\n  setPaymentMethods,\n  paymentMethods,\n  values,\n  setValues,\n}) => {\n  useEffect(async() => {\n    findPaymentMethods();\n  }, [selectedCountry]);\n\n  const findPaymentMethods = async() => {\n    const result = await getPaymentMethods(selectedCountry);\n\n    setPaymentMethods(result);\n  };\n\n  // eslint-disable-next-line no-console\n  console.log(paymentMethods);\n\n  return (\n    <div className=\"is-flex\n      is-justify-content-center\n      is-align-items-center\n      is-flex-wrap-wrap\"\n    >\n      {paymentMethods.length !== 0\n        ? (\n          <>\n            {paymentMethods.map(method => (\n              <div\n                key={method.ps_type_id}\n                className=\"box m-1 is-flex is-align-items-center\"\n              >\n                <input\n                  type=\"radio\"\n                  name=\"method\"\n                  value={method.ps_type_id}\n                  onChange={(event) => {\n                    // eslint-disable-next-line no-console\n                    console.log(event.target.value);\n                    setValues({\n                      ...values,\n                      method: event.target.value,\n                    });\n                  }}\n\n                />\n                <img\n                  src={method.img_url}\n                  alt={method.name}\n                  className=\"m-1\"\n                />\n                {method.name}\n              </div>\n            ))}\n          </>\n        )\n        : <h3>Sorry, payment unavailable in this country</h3>}\n    </div>\n  );\n};\n","import Luhn from 'luhn-js';\n\nexport function onlyNumbers(str) {\n  const notDigits = /\\D/;\n\n  return str.replace(notDigits, '');\n}\n\nexport function onlyCharacters(str) {\n  const notChars = /[^A-Za-z\\s]/g;\n\n  return str.replace(notChars, '');\n}\n\nexport function validateCardNumber(cardNumber) {\n  if (!cardNumber) {\n    return false;\n  }\n\n  return Luhn.isValid(cardNumber);\n}\n\nexport function validateName(name) {\n  const letters = /^[A-Za-z]+$/;\n\n  return name.match(letters);\n}\n\nexport function validateExpDate(checkDate) {\n  const currentYear = (new Date()).getFullYear();\n  const currentMonth = (new Date()).getMonth();\n\n  const [checkYear, checkMonth] = checkDate.split('-').map(num => +num);\n\n  return currentYear < checkYear\n    || (currentMonth < checkMonth && currentYear === checkYear);\n}\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { CountrySelect } from '../CountrySelect/CountrySelect';\nimport { PaymentMethod } from '../PaymentMethod';\nimport {\n  validateCardNumber,\n  validateName,\n  onlyNumbers,\n  onlyCharacters,\n  validateExpDate,\n} from '../../validation';\nimport './CardForm.scss';\n\nconst initialValues = {\n  name: '',\n  card: '',\n  expDate: '',\n  cvv: '',\n  method: '',\n};\n\nconst initialErrors = {\n  name: false,\n  card: false,\n  expDate: false,\n  cvv: false,\n};\n\nexport const CardForm = ({\n  amount = 9.99,\n  currency = '$',\n  doPayment,\n}) => {\n  const [paymentMethods, setPaymentMethods] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState(initialErrors);\n\n  const isNotFilled = !Object.values(values).every(value => value);\n  const isError = Object.values(errors).some(error => error);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    doPayment(values);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CountrySelect\n        setSelectedCountry={setSelectedCountry}\n        selectedCountry={selectedCountry}\n      />\n\n      {paymentMethods && (\n        <PaymentMethod\n          selectedCountry={selectedCountry}\n          setPaymentMethods={setPaymentMethods}\n          paymentMethods={paymentMethods}\n          values={values}\n          setValues={setValues}\n        />\n      )}\n\n      <div className=\"field\">\n        <label className=\"label\">\n          Cardholder name:\n          <input\n            className=\"input\"\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            value={values.name}\n            onChange={event => setValues({\n              ...values,\n              name: onlyCharacters(event.target.value),\n            })}\n            onBlur={() => setErrors({\n              ...errors,\n              name: !validateName(values.name),\n            })}\n          />\n          {errors.name && (\n            <p className=\"help is-danger\">Please enter your name</p>\n          )}\n        </label>\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label\">\n          Card number:\n          <input\n            className=\"input\"\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            value={values.card}\n            onChange={event => setValues({\n              ...values,\n              card: onlyNumbers(event.target.value),\n            })}\n            onBlur={() => setErrors({\n              ...errors,\n              card: !validateCardNumber(values.card),\n            })}\n          />\n          {errors.card && (\n            <p className=\"help is-danger\">Please enter valid card number</p>\n          )}\n        </label>\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label\">\n          CVV code:\n          <input\n            className=\"input\"\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            value={values.cvv}\n            onChange={event => setValues({\n              ...values,\n              cvv: onlyNumbers(event.target.value),\n            })}\n            onBlur={event => setErrors({\n              ...errors,\n              cvv: !values.cvv,\n            })}\n          />\n          {errors.cvv && (\n            <p className=\"help is-danger\">Please enter CVV</p>\n          )}\n        </label>\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label\">\n          Expiration date:\n          <input\n            className=\"input\"\n            type=\"month\"\n            name=\"\"\n            id=\"\"\n            value={values.expDate}\n            onChange={event => setValues({\n              ...values,\n              expDate: event.target.value,\n            })}\n            onBlur={() => setErrors({\n              ...errors,\n              expDate: !validateExpDate(values.expDate),\n            })}\n          />\n          {errors.expDate && (\n            <p className=\"help is-danger\">Please enter valid date</p>\n          )}\n        </label>\n      </div>\n\n      <button\n        type=\"submit\"\n        disabled={isNotFilled || isError}\n        title=\"Fill all fields\"\n        className={classNames({\n          button: true,\n          'is-warning': isNotFilled || isError,\n          'is-success': !(isNotFilled || isError),\n        })}\n      >\n        {`Pay ${amount} ${currency}`}\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport './Notification.scss';\n\n// eslint-disable-next-line react/prop-types\nexport const Notification = ({ isError }) => (\n  <div className={classNames({\n    notification: true,\n    'p-4': true,\n    'is-success': isError,\n    'is-danger': !isError,\n  })}\n  >\n    {!isError\n      ? <p>Payment error</p>\n      : <p>Payment is successful</p>\n    }\n  </div>\n);\n","/* eslint-disable no-unused-vars */\nimport React, { useState } from 'react';\nimport './App.scss';\nimport { CardForm } from './components/CardForm/CardForm';\nimport { Notification } from './components/Notification/Notification';\n\nexport const App = () => {\n  const [isError, setIsError] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n\n  const doPayment = (values) => {\n    setIsError(Boolean(values));\n    // Make some request to server and set isError\n\n    setIsFilled(true);\n  };\n\n  return (\n    <div className=\"container\n      p-4\n      is-flex\n      is-flex-direction-column\n      is-align-items-center\"\n    >\n      {isFilled && <Notification isError={isError} />}\n      <CardForm\n        doPayment={doPayment}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}